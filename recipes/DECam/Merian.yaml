description: The DRP pipeline specialized for the DECam instrument (Merian Survey)
instrument: lsst.obs.decam.DarkEnergyCamera
imports:
  location: $DRP_PIPE_DIR/ingredients/DRP.yaml
  exclude: 
    - isr
    - calibrate
    - selectGoodSeeingVisits
    - templateGen
    - makeWarp
    - assembleCoadd
    - forcedPhotCcd
tasks:
  overscan:
    class: lsst.ip.isr.IsrTask
    config:
    - connections.ccdExposure: raw
      connections.outputExposure: overscanRaw
      doBias: false
      doOverscan: true
      doAssembleCcd: false
      doVariance: false
      doLinearize: false
      doCrosstalk: false
      doDefect: false
      doNanMasking: false
      doInterpolate: false
      doBrighterFatter: false
      doDark: false
      doFlat: false
      doApplyGains: false
      doFringe: false
  isr:
    class: lsst.ip.isr.IsrTask
    config:
    - connections.ccdExposure: raw
      connections.crosstalkSources: overscanRaw
      connections.bias: bias
      connections.flat: flat
      doOverscan: true
      doCrosstalk: true
  calibrate:
    class: lsst.pipe.tasks.calibrate.CalibrateTask
    config:
    - photoCal.match.referenceSelection.magLimit.fluxField: i_flux
      photoCal.match.referenceSelection.magLimit.maximum: 22.0
  selectGoodSeeingVisits:
    class: lsst.pipe.tasks.selectImages.BestSeeingQuantileSelectVisitsTask
    config:
    - connections.goodVisits: goodSeeingVisits
  templateGen:
    class: lsst.pipe.tasks.assembleCoadd.CompareWarpAssembleCoaddTask
    config:
    - doSelectVisits: true
      assembleStaticSkyModel.doSelectVisits: true
      connections.selectedVisits: goodSeeingVisits
      connections.outputCoaddName: goodSeeing
      connections.coaddExposure: goodSeeingCoadd
  makeWarp:
    class: lsst.pipe.tasks.makeCoaddTempExp.MakeWarpTask
    config:
    - doWriteEmptyWarps: true
      doApplyExternalPhotoCalib: false
      doApplyExternalSkyWcs: false
      makePsfMatched: true
    - python: "from lsst.pipe.tasks.selectImages import PsfWcsSelectImagesTask; \n\
        config.select.retarget(PsfWcsSelectImagesTask)\n"
  assembleCoadd:
    class: lsst.pipe.tasks.assembleCoadd.CompareWarpAssembleCoaddTask
    config:
    - doSelectVisits: true
      doNImage: true
      assembleStaticSkyModel.doSelectVisits: true
  forcedPhotCcd:
    class: lsst.meas.base.forcedPhotCcd.ForcedPhotCcdTask
    config:
    - doApplyExternalPhotoCalib: false
      doApplyExternalSkyWcs: false
      doApplySkyCorr: false
subsets:
  processCcd:
    subset:
    - isr
    - characterizeImage
    - calibrate
    description: 'An alias of ProcessCcd to use in higher-level pipelines.
      
      '
  step0:
    subset:
    - overscan
    description: 'Tasks which should be run once, prior to initial data processing.

      This includes construction of crosstalk sources for ISR/interchip crosstalk
      by running overscan correction on raw frames.
      
      '
  step1:
    subset:
    - isr
    - characterizeImage
    - calibrate
    - transformSourceTable
    - writeSourceTable
    description: 'Per-detector tasks that can be run together to start the DRP pipeline.

      These should never be run with ''tract'' or ''patch'' as part of the data ID
      expression if any later steps will also be run, because downstream steps require
      full visits and ''tract'' and ''patch'' constraints will always select partial
      visits that overlap that region.
      
      '
  step2:
    subset:
    - consolidateSourceTable
    - consolidateVisitSummary
    description: 'Per-visit tasks that can be run together, but only after ''step1''.

      These should never be run with ''tract'' or ''patch'' as part of the data ID
      expression.
      
      '
  step3:
    subset:
    - selectGoodSeeingVisits
    - templateGen
    - makeWarp
    - deblend
    - detection
    - writeObjectTable
    - measure
    - mergeMeasurements
    - assembleCoadd
    - forcedPhotCoadd
    - transformObjectTable
    - consolidateObjectTable
    - mergeDetections
    description: 'Tract-level tasks that can be run together, but only after the ''step1''
      and ''step2'' subsets.

      These should be run with explicit ''tract'' constraints essentially all the
      time, because otherwise quanta will be created for jobs with only partial visit
      coverage.
      
      '
  step7:
    subset:
    - makeVisitTable
    - makeCcdVisitTable
    description: 'Tasks that should be run as the final step that require global inputs,
      and can be run after the ''step3'' subset.

      This step has global aggregation tasks to run over all visits, detectors, tracts,
      etc.  This step should be run only with the instrument constraint in the data
      query.
      
      '
