description: The DRP pipeline specialized for the HSC instrument
instrument: lsst.obs.subaru.HyperSuprimeCam
imports:
  - $PIPE_TASKS_DIR/pipelines/DRP.yaml
  - $FARO_DIR/pipelines/metrics_pipeline_jointcal_fgcm.yaml
tasks:
  skyCorr:
    class: lsst.pipe.drivers.skyCorrection.SkyCorrectionTask
  jointcal:
    # The jointcal package depends on obs_subaru, not the other way around, so
    # it's not great to have this here, but it's the least-bad temporary spot
    # for this information (which is specific to both Gen3 and HSC) until we
    # RFC-approve a better home for it.
    class: lsst.jointcal.JointcalTask
    config:
      # Disable photometry because we don't need it (FGCM takes care of that)
      # and it's broken in Gen3 (DM-29884).  Also disable color terms because
      # jointcal warns if that's true but doPhotometry=False.  It would be
      # better to disable this via config (DM-29885), but it's hard to make
      # that compatible with the jointcal tests because jointcal depends on
      # obs_subaru.
      doPhotometry: false
      applyColorTerms: false
      python: |
        # These overrides were copied from the tests/config/config-gen3.yaml file
        # on 22 Sept 2021.  This is necessary for processing in containers to succeed
        # because the build system strips out the test directories for space concerns.
        #
        # TODO DM-29008: When that ticket is merged these overrides will no longer
        # be needed at all since that will fix higher level issues with how config
        # overrides are imported in general.
        config.sourceSelector['science'].flags.bad = ['pixelFlags_edge',
                                                      'pixelFlags_saturated',
                                                      'pixelFlags_interpolatedCenter',
                                                      'pixelFlags_interpolated',
                                                      'pixelFlags_crCenter',
                                                      'pixelFlags_bad',
                                                      'hsmPsfMoments_flag',
                                                      'apFlux_12_0_flag',
                                                     ]
        config.sourceSelector['science'].doUnresolved = False
        config.sourceSelector['science'].signalToNoise.fluxField = 'apFlux_12_0_instFlux'
        config.sourceSelector['science'].signalToNoise.errField = 'apFlux_12_0_instFluxErr'
        config.sourceSelector['science'].isolated.parentName = 'parentSourceId'
        config.sourceSelector['science'].isolated.nChildName = 'deblend_nChild'
        config.sourceFluxType = 'apFlux_12_0'

        # TODO DM-27843: workaround for gen3 not supporting anyFilterMapsToThis
        config.astrometryRefObjLoader.filterMap = {'g': 'phot_g_mean',
                                                   'r': 'phot_g_mean',
                                                   'i': 'phot_g_mean',
                                                   'z': 'phot_g_mean',
                                                   'y': 'phot_g_mean',
                                                   'N921': 'phot_g_mean',
                                                  }
        config.astrometryRefObjLoader.anyFilterMapsToThis = None
  # The FGCM configurations below are appropriate specifically for RC2; like
  # the jointcal information above, this is the least-bad place for it, because
  # Gen3 HSC is unlikely to mean anything other than RC2 until we have a new
  # home for these that lets us separate generic HSC from RC2 (and ci_hsc has
  # its own customization).
  fgcmBuildStarsTable:
    class: lsst.fgcmcal.fgcmBuildStarsTable.FgcmBuildStarsTableTask
    config:
      minPerBand: 1
      densityCutMaxPerPixel: 1500
      primaryBands: ['i', 'r', 'g', 'z', 'y', 'N921']
      doReferenceMatches: True
      randomSeed: 23456
  fgcmFitCycle:
    class: lsst.fgcmcal.fgcmFitCycle.FgcmFitCycleTask
    config:
      doMultipleCycles: true
      multipleCyclesFinalCycleNumber: 4
      randomSeed: 89234
      outfileBase: 'fgcmFitCycleRC2'
      bands: ['g', 'r', 'i', 'z', 'N921', 'y']
      fitBands: ['g', 'r', 'i', 'z', 'N921', 'y']
      maxIterBeforeFinalCycle: 50
      expGrayPhotometricCutDict:
        g: -0.05
        r: -0.05
        i: -0.05
        z: -0.05
        N921: -0.05
        y: -0.05
      expGrayHighCutDict:
        g: 0.10
        r: 0.10
        i: 0.10
        z: 0.10
        N921: 0.10
        y: 0.10
      aperCorrFitNBins: 0
      minStarPerExp: 100
      expVarGrayPhotometricCutDict:
        g: 0.0025
        r: 0.0025
        i: 0.0025
        z: 0.0025
        N921: 0.005
        y: 0.0025
      minExpPerNight: 3
      python: |
        from lsst.fgcmcal import Sedterm, Sedboundaryterm
        config.sedboundaryterms.data = {'gr': Sedboundaryterm(primary='g', secondary='r'),
                                        'ri': Sedboundaryterm(primary='r', secondary='i'),
                                        'iz': Sedboundaryterm(primary='i', secondary='z'),
                                        'zy': Sedboundaryterm(primary='z', secondary='y'),
                                        'N921z': Sedboundaryterm(primary='N921', secondary='z')}
        config.sedterms.data = {'g': Sedterm(primaryTerm='gr', secondaryTerm='ri', constant=1.6),
                                'r': Sedterm(primaryTerm='gr', secondaryTerm='ri', constant=0.9),
                                'i': Sedterm(primaryTerm='ri', secondaryTerm='iz', constant=1.0),
                                'z': Sedterm(primaryTerm='iz', secondaryTerm='zy', constant=1.0),
                                'y': Sedterm(primaryTerm='zy', secondaryTerm='iz', constant=0.25,
                                             extrapolated=True, primaryBand='y', secondaryBand='z',
                                             tertiaryBand='i'),
                                'N921': Sedterm(primaryTerm='N921z', constant=0.5)}
  fgcmOutputProducts:
    class: lsst.fgcmcal.fgcmOutputProducts.FgcmOutputProductsTask
    config:
      doRefcatOutput: false
      cycleNumber: 4
  makeWarp:
    class: lsst.pipe.tasks.makeCoaddTempExp.MakeWarpTask
    config:
      python: >
        from lsst.pipe.tasks.selectImages import PsfWcsSelectImagesTask;
        config.select.retarget(PsfWcsSelectImagesTask)
  forcedPhotCcd:
    class: lsst.meas.base.forcedPhotCcd.ForcedPhotCcdTask
    config:
      # The application of external calibrations doesn't work with Gen3 now (DM-17062)
      doApplyExternalPhotoCalib: false
      doApplyExternalSkyWcs: false
      doApplySkyCorr: false
subsets:
  fgcm:
    subset:
      - fgcmBuildStarsTable
      - fgcmFitCycle
      - fgcmOutputProducts
    description: >
      Subset that includes all FGCM tasks.
  singleFrame:
    subset:
      - isr
      - characterizeImage
      - calibrate
      - writeSourceTable
      - transformSourceTable
      - consolidateSourceTable
      - consolidateVisitSummary
      - skyCorr
    description: >
      Set of tasks for complete single frame processing. Analogous to
      SingleFrameDriver.
  multiVisit:
    subset: []
    description: |
      The multiVisit subset defined in pipe_tasks' DRP.yaml is not safe to
      use on HSC for various reasons; use 'step1', 'step2', and 'step3' subsets
      instead.  It may be re-enabled in the future.
  faro_step2:
    subset:
      - nsrcMeasVisit
      - TE3
      - TE4
    description: >
      Set of tasks for calculation of metrics via faro. This includes tasks
      that operate on single visits, and thus appear in step2 below.
  faro_step3:
    subset:
      - matchCatalogsTract
      - matchCatalogsPatch
      - matchCatalogsPatchMultiBand
      - PA1
      - PF1_design
      - AM1
      - AM2
      - AM3
      - AD1_design
      - AD2_design
      - AD3_design
      - AF1_design
      - AF2_design
      - AF3_design
      - AB1
      - modelPhotRepGal1
      - modelPhotRepGal2
      - modelPhotRepGal3
      - modelPhotRepGal4
      - modelPhotRepStar1
      - modelPhotRepStar2
      - modelPhotRepStar3
      - modelPhotRepStar4
      - psfPhotRepStar1
      - psfPhotRepStar2
      - psfPhotRepStar3
      - psfPhotRepStar4
    description: >
      Set of tasks for calculation of metrics via faro. This includes tasks
      that operate on matched visits, and thus appear in step3 below.
  faro_step5:
    subset:
      - TE1
      - TE2
      - wPerp
    description: >
      Set of tasks for calculation of metrics via faro. This includes tasks
      that operate on coadds, and thus appear in step5 below.
  step1:
    subset:
      - isr
      - characterizeImage
      - calibrate
      - writeSourceTable
      - transformSourceTable
    description: >
      Per-detector tasks that can be run together to start the DRP pipeline.

      These should never be run with 'tract' or 'patch' as part of the data ID
      expression if any later steps will also be run, because downstream steps
      require full visits and 'tract' and 'patch' constraints will always
      select partial visits that overlap that region.
  step2:
    subset:
      - consolidateSourceTable
      - consolidateVisitSummary
      - skyCorr
      - fgcmBuildStarsTable
      - fgcmFitCycle
      - fgcmOutputProducts
      - nsrcMeasVisit
      - TE3
      - TE4
    description: >
      Per-visit tasks that can be run together, but only after the 'step1'.

      These should never be run with 'tract' or 'patch' as part of the data ID
      expression. skyCorr and FGCM require full visits and 'tract' and 'patch'
      constraints will always select partial visits that overlap that region.

      This includes FGCM because it's configured here to run in "global" mode,
      which means one should not use 'tract' expression to constrain it, and if
      one _did_ run it with a tract constraint (which would be a common
      occurrence if it was included in any later step), it would be fed the
      wrong (partial-visit) inputs to its 'background' connection.

      This subset is considered a workaround for missing middleware and task
      functionality.  It may be removed in the future.
  step3:
    subset:
      - jointcal
      - makeWarp
      - assembleCoadd
      - detection
      - mergeDetections
      - deblend
      - measure
      - mergeMeasurements
      - forcedPhotCoadd
      - transformObjectTable
      - writeObjectTable
      - consolidateObjectTable
      - healSparsePropertyMaps
      - selectGoodSeeingVisits
      - templateGen
      - matchCatalogsTract
      - matchCatalogsPatch
      - matchCatalogsPatchMultiBand
      - PA1
      - PF1_design
      - AM1
      - AM2
      - AM3
      - AD1_design
      - AD2_design
      - AD3_design
      - AF1_design
      - AF2_design
      - AF3_design
      - AB1
      - modelPhotRepGal1
      - modelPhotRepGal2
      - modelPhotRepGal3
      - modelPhotRepGal4
      - modelPhotRepStar1
      - modelPhotRepStar2
      - modelPhotRepStar3
      - modelPhotRepStar4
      - psfPhotRepStar1
      - psfPhotRepStar2
      - psfPhotRepStar3
      - psfPhotRepStar4
    description: >
      Tasks that can be run together, but only after the 'step1' and 'step2'
      subsets.

      These should be run with explicit 'tract' constraints essentially all the
      time, because otherwise quanta will be created for jobs with only partial
      visit coverage.

      It is expected that many forcedPhotCcd quanta will "normally" fail when
      running this subset, but this isn't a problem right now because there
      are no tasks downstream of it.  If other tasks regularly fail or we add
      tasks downstream of forcedPhotCcd, these subsets or the tasks will need
      additional changes.

      This subset is considered a workaround for missing middleware and task
      functionality.  It may be removed in the future.
  step4:
    subset:
    - forcedPhotCcd
    - forcedPhotDiffim
    - getTemplate
    - imageDifference
    - transformDiaSourceCat
    - writeForcedSourceTable
    description: >
      Tasks that can be run together, but only after the 'step1', 'step2'
      and 'step3' subsets

      These detector-level tasks should not be run with
      'tract' or 'patch' as part of the data ID expression if all
      reference catalogs or diffIm templates that cover these
      detector-level quanta are desired.
  step5:
    subset:
    - drpAssociation
    - drpDiaCalculation
    - forcedPhotCcdOnDiaObjects
    - forcedPhotDiffOnDiaObjects
    - transformForcedSourceTable
    - consolidateForcedSourceTable
    - consolidateAssocDiaSourceTable
    - consolidateFullDiaObjectTable
    - writeForcedSourceOnDiaObjectTable
    - transformForcedSourceOnDiaObjectTable
    - consolidateForcedSourceOnDiaObjectTable
    - TE1
    - TE2
    - wPerp
    description: >
        Tasks that can be run together, but only after the 'step1', 'step2',
        'step3', and 'step4' subsets

        This step includes patch-level aggregation Tasks. These should be
        run with explicit 'tract' constraints in the data query, otherwise
        quanta will be created for jobs with only partial visit coverage.
        'consolidateForcedSourceTable' is a tract-level task that aggregates
        patches and should be rerun if any of the patches fail.
  step6:
    subset:
    - consolidateDiaSourceTable
    description: >
        Tasks that can be run together, but only after the 'step1', 'step2',
        'step3', and 'step4' subsets

        This step includes visit-level aggregation tasks. Running without
        tract or patch in the data query is recommended, otherwise the
        outputs of consolidateDiaSourceTable will not contain complete visits.

        This subset is separate from step4 to signal to operators to pause
        to assess unexpected image differencing failures before these
        aggregation steps. Otherwise, if run in the same quantum graph,
        aggregated data products (e.g. diaObjects) would not be created if
        one or more of the expected inputs is missing.
  step7:
    subset:
      - makeCcdVisitTable
      - makeVisitTable
      - consolidateHealSparsePropertyMaps
    description: >
      Tasks that should be run as the final step that require global
      inputs, and can be run after the 'step3' subset.

      This step has global aggregation tasks to run over all visits,
      detectors, tracts, etc.  This step should be run only with
      the instrument constraint in the data query.
