description: DRP specialized for ImSim-DC2 data
instrument: lsst.obs.lsst.LsstCamImSim
imports:
  - $DRP_PIPE_DIR/pipelines/_ingredients/DRP-minimal-calibration.yaml
  - $FARO_DIR/pipelines/metrics_pipeline.yaml
  - $ANALYSIS_TOOLS_DIR/pipelines/coaddColumnValidate.yaml
  - $ANALYSIS_TOOLS_DIR/pipelines/coaddDiffMatchedQualityExtended.yaml
  - $ANALYSIS_TOOLS_DIR/pipelines/coaddQualityCore.yaml
  - $ANALYSIS_TOOLS_DIR/pipelines/matchedVisitQualityCore.yaml
parameters:
  filterMap: {
    "u": "lsst_u_smeared",
    "g": "lsst_g_smeared",
    "r": "lsst_r_smeared",
    "i": "lsst_i_smeared",
    "z": "lsst_z_smeared",
    "y": "lsst_y_smeared",
  }
  # Bands to match aperture fluxes on as a fallback if cModel failed
  # default is for highest S/N bands to avoid giving equal weight
  # to aperture fluxes vs CModel (which should be better for galaxies)
  bands_match_fallback: ["r", "i"]
tasks:
  isr:
    class: lsst.ip.isr.IsrTask
    config:
      connections.newBFKernel: bfk
      doDefect: false
      doBrighterFatter: true
  calibrate:
    class: lsst.pipe.tasks.calibrate.CalibrateTask
    config:
      connections.astromRefCat: "cal_ref_cat_2_2"
      connections.photoRefCat: "cal_ref_cat_2_2"
      python: |
        config.astromRefObjLoader.filterMap = parameters.filterMap
        config.photoRefObjLoader.filterMap = parameters.filterMap
  measure:
    class: lsst.pipe.tasks.multiBand.MeasureMergedCoaddSourcesTask
    config:
      connections.refCat: "cal_ref_cat_2_2"
      python: |
        config.match.refObjLoader.filterMap = parameters.filterMap
  matchObjectToTruth:
    class: lsst.pipe.tasks.match_tract_catalog.MatchTractCatalogTask
    config:
      python: |
        # Target settings are likely common to all object tables
        from lsst.pipe.tasks.match_tract_catalog_probabilistic import MatchTractCatalogProbabilisticTask
        config.match_tract_catalog.retarget(MatchTractCatalogProbabilisticTask)
        bands_match = parameters.filterMap.keys()
        fluxes_ref = [
          f"flux_{band}" for bands in (bands_match, parameters.bands_match_fallback) for band in bands
        ]
        config.match_tract_catalog.columns_ref_flux = fluxes_ref
        config.match_tract_catalog.columns_ref_meas = ["ra", "dec"] + fluxes_ref
        fluxes_meas = [f"{band}_cModelFlux" for band in bands_match] + [
            f"{band}_ap12Flux" for band in parameters.bands_match_fallback
        ]
        columns_meas = ["x", "y"] + fluxes_meas
        config.match_tract_catalog.columns_target_meas = columns_meas
        config.match_tract_catalog.columns_target_err = [f"{col}Err" for col in columns_meas]
        config.match_tract_catalog.coord_format.coords_ref_to_convert = {"ra": "x", "dec": "y"}
        # Might need adjusting for different survey depths
        config.match_tract_catalog.mag_faintest_ref = 27.0
        config.match_tract_catalog.columns_ref_copy = ["id", "truth_type"]
        config.match_tract_catalog.columns_ref_select_true = ["is_unique_truth_entry"]
        config.match_tract_catalog.columns_target_copy = ["objectId"]
  compareObjectToTruth:
    class: lsst.pipe.tasks.diff_matched_tract_catalog.DiffMatchedTractCatalogTask
    config:
      columns_target_coord_err: ["xErr", "yErr"]
      coord_format.coords_ref_to_convert: {"ra": "x", "dec": "y"}

      python: |
        from lsst.pipe.tasks.diff_matched_tract_catalog import MatchedCatalogFluxesConfig
        columns_flux = {}
        fluxes_meas_psf = []
        for band in parameters.filterMap:
            columns_flux[band] = MatchedCatalogFluxesConfig(
                column_ref_flux=f"flux_{band}",
                columns_target_flux=[f"{band}_cModelFlux",],
                columns_target_flux_err=[f"{band}_cModelFluxErr",],
            )
            fluxes_meas_psf.append(f"{band}_psfFlux")
        config.columns_flux = columns_flux
        config.columns_target_copy = ["patch"] + fluxes_meas_psf + [
          f"{col}Err" for col in fluxes_meas_psf
        ]
  catalogMatchTract:
    class: lsst.analysis.tools.tasks.astrometricCatalogMatch.AstrometricCatalogMatchTask
    config:
      connections.refCatalog: "cal_ref_cat_2_2"
  photometricCatalogMatch:
    class: lsst.analysis.tools.tasks.photometricCatalogMatch.PhotometricCatalogMatchTask
    config:
      connections.refCatalog: cal_ref_cat_2_2
      connections.matchedCatalog: objectTable_tract_cal_ref_cat_2_2_photoMatch
  refCatObjectTract:
    class: lsst.analysis.tools.tasks.refCatObjectAnalysis.RefCatObjectAnalysisTask
    config:
      connections.refCatalog: "cal_ref_cat_2_2"
  photometricRefCatObjectTract:
    class: lsst.analysis.tools.tasks.refCatObjectPhotometricAnalysis.RefCatObjectPhotometricAnalysisTask
    config:
      connections.data: objectTable_tract_cal_ref_cat_2_2_photoMatch
subsets:
  step1:
    subset:
      - isr
      - characterizeImage
      - calibrate
      - writeSourceTable
      - transformSourceTable
    description: |
      Per-detector tasks that can be run together to start the DRP pipeline.

      These may or may not be run with 'tract' or 'patch' as part of the data
      ID expression. This specific pipeline contains no tasks that require full
      visits. Running with 'tract' (and 'patch') constraints will select
      partial visits that overlap that region.

      In data release processing, operators should stop to address unexpected
      failures before continuing on to step2.
  step2:
    subset:
      - consolidateSourceTable
      - consolidateVisitSummary
      - isolatedStarAssociation
      - finalizeCharacterization
      - makeCcdVisitTable
      - makeVisitTable
      - updateVisitSummary
    description: |
      Tasks that can be run together, but only after the 'step1'.

      This is a mix of visit-level, tract-level, and collection-level tasks
      that must be run with a skymap data query constraint only (an instrument
      constraint is fine, but generally unneccessary).  For example, running
      with 'tract' (and 'patch') constraints will select partial visits that
      overlap that region.  A skymap constraint is necessary to prevent
      isolatedStarAssociation from producing results for all skymaps in the
      data repository.

      Visit-level tasks include consolidateSourceTable, consolidateVisitSummary,
      finalizeCharacterization, updateVisitSummary.
      Tract-level tasks include: isolatedStarAssociation
      Full collection-level tasks include: makeCcdVisitTable, makeVisitTable
  step3:
    subset:
      - makeWarp
      - selectDeepCoaddVisits
      - assembleCoadd
      - detection
      - mergeDetections
      - deblend
      - measure
      - mergeMeasurements
      - forcedPhotCoadd
      - transformObjectTable
      - writeObjectTable
      - consolidateObjectTable
      - healSparsePropertyMaps
      - selectGoodSeeingVisits
      - templateGen
      - matchObjectToTruth
      - compareObjectToTruth
    description: |
      Tasks that can be run together, but only after the 'step1' and 'step2'
      subsets.

      These should be run with explicit 'tract' constraints essentially all the
      time, because otherwise quanta will be created for jobs with only partial
      visit coverage.

      It is expected that many forcedPhotCcd quanta will "normally" fail when
      running this subset, but this isn't a problem right now because there are
      no tasks downstream of it.  If other tasks regularly fail or we add tasks
      downstream of forcedPhotCcd, these subsets or the tasks will need
      additional changes.

      This subset is considered a workaround for missing middleware and task
      functionality.  It may be removed in the future.
  step4:
    subset:
      - forcedPhotCcd
      - forcedPhotDiffim
      - getTemplate
      - subtractImages
      - detectAndMeasureDiaSources
      - transformDiaSourceCat
      - writeForcedSourceTable
    description: |
      Tasks that can be run together, but only after the 'step1', 'step2' and
      'step3' subsets

      These detector-level tasks should not be run with 'tract' or 'patch' as
      part of the data ID expression if all reference catalogs or diffIm
      templates that cover these detector-level quanta are desired.
  step5:
    subset:
      - drpAssociation
      - drpDiaCalculation
      - forcedPhotCcdOnDiaObjects
      - forcedPhotDiffOnDiaObjects
      - transformForcedSourceTable
      - consolidateForcedSourceTable
      - consolidateAssocDiaSourceTable
      - consolidateFullDiaObjectTable
      - writeForcedSourceOnDiaObjectTable
      - transformForcedSourceOnDiaObjectTable
      - consolidateForcedSourceOnDiaObjectTable
    description: |
      Tasks that can be run together, but only after the 'step1', 'step2',
      'step3', and 'step4' subsets

      This step includes patch-level aggregation Tasks. These should be run
      with explicit 'tract' constraints in the data query, otherwise quanta
      will be created for jobs with only partial visit coverage.
      'consolidateForcedSourceTable' is a tract-level task that aggregates
      patches and should be rerun if any of the patches fail.
  step6:
    subset:
      - consolidateDiaSourceTable
    description: |
      Tasks that can be run together, but only after the 'step1', 'step2',
      'step3', and 'step4' subsets

      This step includes visit-level aggregation tasks. Running without tract
      or patch in the data query is recommended, otherwise the outputs of
      consolidateDiaSourceTable will not contain complete visits.

      This subset is separate from step4 to signal to operators to pause to
      assess unexpected image differencing failures before these aggregation
      steps. Otherwise, if run in the same quantum graph, aggregated data
      products (e.g. diaObjects) would not be created if one or more of the
      expected inputs is missing.
  step7:
    subset:
      - consolidateHealSparsePropertyMaps
    description: |
      Tasks that should be run as the final step that require global inputs,
      and can be run after the 'step3' subset.

      This step has global aggregation tasks to run over all visits, detectors,
      tracts, etc.  This step should be run only with the instrument constraint
      in the data query.
  step8:
    subset:
      - analyzeObjectTableCore
      - analyzeObjectTableSurveyCore
      - catalogMatchTract
      - refCatObjectTract
      - diff_matched_analysis
      - validateObjectTableCore
      - analyzeMatchedVisitCore
    description: |
      Core (most important), coadd-level plots/metrics from analysis_tools.

      Must be run after 'step3' (writeObjectTable). Cannot be run with any
      dataquery constraints if analyzeObjectTableSurveyCore is included.

      Can be run together with analysis_drp subsets, e.g. pipeline.yaml
      (hash/pound sign)step8,analysis_coadd_plots,imsim_analysis_coadd_plots

      Includes extended-level diff_matched_analysis metrics, which are
      considered core for DC2 as they can't be run on other datasets yet.
  faro_visit:
    subset:
      - nsrcMeasVisit
      - TE3
      - TE4
    description: |
      Set of visit-level faro metrics. These tasks run on single-frame products and
      require Calibrated Source Tables, which are available after
      consolidateSourceTable (step6) is run.
  faro_matched:
    subset:
      - matchCatalogsTract
      - matchCatalogsPatch
      - matchCatalogsPatchMultiBand
      - matchCatalogsTractMag17to21p5
      - matchCatalogsTractStarsSNR5to80
      - matchCatalogsTractGxsSNR5to80
      - PA1
      - PF1_design
      - AM1
      - AM2
      - AM3
      - AD1_design
      - AD2_design
      - AD3_design
      - AF1_design
      - AF2_design
      - AF3_design
      - AB1
      - modelPhotRepGal1
      - modelPhotRepGal2
      - modelPhotRepGal3
      - modelPhotRepGal4
      - modelPhotRepStar1
      - modelPhotRepStar2
      - modelPhotRepStar3
      - modelPhotRepStar4
      - psfPhotRepStar1
      - psfPhotRepStar2
      - psfPhotRepStar3
      - psfPhotRepStar4
    description: |
      Set of tract-level, matched-visit faro metrics. These tasks run on single-frame
      products and require Calibrated Source Tables, which are available after
      consolidateSourceTable (step6) is run.
  faro_tract:
    subset:
      - TE1
      - TE2
      - wPerp
      - skyObjectMean
      - skyObjectStd
    description: |
      Set of tract-level faro metrics to be run on coadd products. These use Object
      Tables which are available after consolidateObjectTable (step3) is run.

      These must have a band constraint in their data query to avoid generating
      quanta for bands that do not have columns in the object table, since
      using an object table dataset as input does not provide information to
      the middleware about which tasks went into making the object table.
